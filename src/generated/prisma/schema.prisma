// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication support
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  enrollments   Enrollment[]
  payments      Payment[]
  progress      Progress[]

  @@map("users")
}

// Role enum for user authorization
enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

// Account model for OAuth providers
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Course model
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  imageUrl    String?
  price       Decimal  @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]
  categories  CategoriesOnCourses[]

  @@map("courses")
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses CategoriesOnCourses[]

  @@map("categories")
}

// Join table for many-to-many relationship between courses and categories
model CategoriesOnCourses {
  courseId   String
  categoryId String
  assignedAt DateTime @default(now())

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
  @@map("categories_on_courses")
}

// Lesson model
model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

// Subscription model
model Subscription {
  id                String             @id @default(cuid())
  userId            String
  status            SubscriptionStatus
  priceId           String?
  subscriptionId    String? // External subscription ID (e.g., Stripe)
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Subscription status enum
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  UNPAID
  INCOMPLETE
}

// Enrollment model
model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

// Payment model
model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Decimal
  currency        String
  paymentIntentId String? // External payment ID (e.g., Stripe)
  status          PaymentStatus
  couponId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon? @relation(fields: [couponId], references: [id])

  @@map("payments")
}

// Payment status enum
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Coupon model
model Coupon {
  id              String    @id @default(cuid())
  code            String    @unique
  discountPercent Int       @default(0)
  discountAmount  Decimal   @default(0)
  expiresAt       DateTime?
  maxUses         Int?
  usedCount       Int       @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  payments Payment[]

  @@map("coupons")
}

// Progress model - tracks user progress through lessons
model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}
